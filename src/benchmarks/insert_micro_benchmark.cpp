#include <benchmark/benchmark.h>

#include <iostream>
#include <chrono>
#include <ctime>

#include "macros/macros.hpp"

#include "pear_tree.hpp"
#include "micro_benchmark_fixture.hpp"
#include "test_universal_helpers.hpp"
#include "micro_benchmark.hpp"

#define INSERT_BENCHMARK_SZ_TAXI(NAME,TREE_TYPE, INITIAL_DATASET, ADDED_DATASET, INITIAL_SIZE, TOTAL_ADDED_SIZE) \
BENCHMARK_TEMPLATE_DEFINE_F(MicroBenchmarkFixture, BM_INSERT_SZ_TAXI_ ## NAME, argument_type<void(TREE_TYPE)>::type)(benchmark::State& state) { \
    rtree_insert_benchmark(SZ_TAXI_100M, SZ_TAXI_200M + SZ_TAXI_XL_INITIAL_POINTS_AMONT, state, *this);                     \
} \
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, BM_INSERT_SZ_TAXI_ ## NAME)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(9)->Args({(100000000), (4000000)});
//BENCHMARK_REGISTER_F(MicroBenchmarkFixture, BM_INSERT_SZ_TAXI_ ## NAME)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(9)->Args({(100000000), (4000000)}); \
//BENCHMARK_REGISTER_F(MicroBenchmarkFixture, BM_INSERT_SZ_TAXI_ ## NAME)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(10)->Args({(100000000), (4000000)}); \
//BENCHMARK_REGISTER_F(MicroBenchmarkFixture, BM_INSERT_SZ_TAXI_ ## NAME)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(11)->Args({(100000000), (4000000)}); \
//BENCHMARK_REGISTER_F(MicroBenchmarkFixture, BM_INSERT_SZ_TAXI_ ## NAME)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(12)->Args({(100000000), (4000000)});


template<typename tree_type>
static void rtree_insert_benchmark(micro_benchmark::rect_float_type const * const initial_rects, micro_benchmark::rect_float_type const * const added_rects, benchmark::State& state, MicroBenchmarkFixture<tree_type> &fixture) {
    int added_size = state.range(1);
    int initial_size = state.range(0);
    if(ipow(tree_type::t_max_node_size, tree_type::max_tree_depth)*0.7 < added_size+initial_size) {
        std::cout << "WARNING: Trying to add " << added_size+initial_size << " to a tree with a max capacity of " << ipow(tree_type::t_max_node_size, tree_type::max_tree_depth) << std::endl;
    }
    if(state.threads == 1 || state.thread_index == 0) {
        fixture.prepare_tree(initial_rects, initial_size);
    }
    state.SetItemsProcessed((added_size*(state.threads)));
    for(auto _: state) {
        for (int i = 0; i < added_size; i++) {
            fixture._tree->insert(added_rects[i+(added_size*(state.thread_index))], (long) i+(added_size*(state.thread_index))+initial_size);
        }
    }
    state.SetItemsProcessed((added_size*(state.threads)));
    if(state.threads == 1 || state.thread_index == 0) {
//        std::set<long> values;
//        for(int i = 0; i < (added_size * (state.threads))+initial_size; i++) {
//            values.insert((long)i);
//        };
//        fixture._tree->_root->check_for_values(values, initial_rects, initial_size);
//        std::stringstream missing_values;
//        for(auto it = values.begin(); it != values.end(); it++) {
//            missing_values << *it << ", ";
//        }
//        if(!values.empty()) {
//            std::cout << "Missing values (" << values.size() << "): " << missing_values.str() << std::endl;
//        }
        int count = fixture._tree->test_num_branches(0);
        test_universal_tree_MBR_fit<tree_type::t_max_node_size,tree_type, typename tree_type::node_type,float>(*(fixture._tree), false);
        if (count != initial_size + (added_size * (state.threads))) {
            std::cout << "Not the right number of leafes: " << count << std::endl;
            std::cout << "Expected: " << initial_size + (added_size * (state.threads)) << std::endl;
            std::set<long> values;
            for(int i = 0; i < (added_size * (state.threads))+initial_size; i++) {
                values.insert((long)i);
            };
            fixture._tree->_root->check_for_values(values, initial_rects, initial_size);
            std::stringstream missing_values;
            for(auto it = values.begin(); it != values.end(); it++) {
                missing_values << *it << ", ";
            }
            if(!values.empty()) {
                std::cout << "Missing values (" << values.size() << "): " << missing_values.str() << std::endl;
            }
        }
//        int num_dram_nodes = fixture._tree->get_dram_node_count();
//        int num_pmem_nodes = fixture._tree->get_pmem_node_count();
//        std::cout << num_dram_nodes+num_pmem_nodes << " nodes in total (DRAM: " << num_dram_nodes << "; PMEM: " << num_pmem_nodes << ")" << std::endl;
//        int count2 = fixture._tree->test_num_branches(0);
//        test_tree_MBR_fit(*(fixture._tree));
//        if (count2 != initial_size + (added_size * (state.threads))) {
//            std::cout << "[CHECK 2] Not the right number of leafes: " << count << std::endl;
//            std::cout << "Expected: " << initial_size + (added_size * (state.threads)) << std::endl;
//        } else {
//            std::cout << "[CHECK 2] Success: " << count << std::endl;
//        }
        delete fixture._tree;
        fixture._tree = NULL;
        auto end = std::chrono::system_clock::now();
        std::time_t end_time = std::chrono::system_clock::to_time_t(end);

        std::cout << "Finished computation at " << std::ctime(&end_time) << std::endl;
        fixture.preparation_flag.store(1, std::memory_order_seq_cst);
    }
    state.SetItemsProcessed((added_size*(state.threads)));
    while(fixture.preparation_flag.load(std::memory_order_acquire) == 0);
}


/*** BASIC Version (max_pmem_level) ***/
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_DRAM, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(-1)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_DRAM_COMPLETE_LOCKING, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_COMPLETE_PATH_LOCKING + PEAR_STRAT_BASIC_VERSION(-1)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_LEAF, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(0)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_LEAF_COMPLETE_LOCKING, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_COMPLETE_PATH_LOCKING + PEAR_STRAT_BASIC_VERSION(0)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_1_PMEM, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(1)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_1_PMEM_COMPLETE_LOCKING, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_COMPLETE_PATH_LOCKING + PEAR_STRAT_BASIC_VERSION(1)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_2_PMEM, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(2)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_2_PMEM_COMPLETE_LOCKING, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_COMPLETE_PATH_LOCKING + PEAR_STRAT_BASIC_VERSION(2)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_3_PMEM, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(3)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_3_PMEM_COMPLETE_LOCKING, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_COMPLETE_PATH_LOCKING + PEAR_STRAT_BASIC_VERSION(3)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_1024, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(1024)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_1024_COMPLETE_LOCKING, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_COMPLETE_PATH_LOCKING + PEAR_STRAT_BASIC_VERSION(1024)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_DRAM_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(-1)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_DRAM_COMPLETE_LOCKING_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_COMPLETE_PATH_LOCKING + PEAR_STRAT_BASIC_VERSION(-1)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_LEAF_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(0)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_LEAF_COMPLETE_LOCKING_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_COMPLETE_PATH_LOCKING + PEAR_STRAT_BASIC_VERSION(0)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_1_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(1)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_1_COMPLETE_LOCKING_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_COMPLETE_PATH_LOCKING + PEAR_STRAT_BASIC_VERSION(1)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_2_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(2)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_2_COMPLETE_LOCKING_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_COMPLETE_PATH_LOCKING + PEAR_STRAT_BASIC_VERSION(2)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_3_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(3)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_3_COMPLETE_LOCKING_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_COMPLETE_PATH_LOCKING + PEAR_STRAT_BASIC_VERSION(3)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_1024_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(1024)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_1024_COMPLETE_LOCKING_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_COMPLETE_PATH_LOCKING + PEAR_STRAT_BASIC_VERSION(1024)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_DRAM_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(-1)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_DRAM_COMPLETE_LOCKING_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_COMPLETE_PATH_LOCKING + PEAR_STRAT_BASIC_VERSION(-1)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_LEAF_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(0)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_LEAF_COMPLETE_LOCKING_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_COMPLETE_PATH_LOCKING + PEAR_STRAT_BASIC_VERSION(0)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_1_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(1)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_1_COMPLETE_LOCKING_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_COMPLETE_PATH_LOCKING + PEAR_STRAT_BASIC_VERSION(1)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_2_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(2)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_2_COMPLETE_LOCKING_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_COMPLETE_PATH_LOCKING + PEAR_STRAT_BASIC_VERSION(2)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_3_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(3)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_3_COMPLETE_LOCKING_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_COMPLETE_PATH_LOCKING + PEAR_STRAT_BASIC_VERSION(3)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_1024_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(1024)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_M_1024_COMPLETE_LOCKING_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_COMPLETE_PATH_LOCKING + PEAR_STRAT_BASIC_VERSION(1024)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)


/*** BASIC Version XL Tree (max_pmem_level) ***/
INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_DRAM_OPTIMAL_NODE_SIZE, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(-1)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_LEAF_OPTIMAL_NODE_SIZE, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(0)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_1_OPTIMAL_NODE_SIZE, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(1)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_2_OPTIMAL_NODE_SIZE, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(2)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_3_OPTIMAL_NODE_SIZE, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(3)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_4_OPTIMAL_NODE_SIZE, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(4)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_1024_OPTIMAL_NODE_SIZE, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(1024)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_DRAM_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(-1)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_LEAF_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(0)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_1_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(1)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_2_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(2)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_3_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(3)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_4_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(4)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_1024_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(1024)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_DRAM_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(-1)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_LEAF_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(0)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_1_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(1)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_2_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(2)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_3_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(3)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_4_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(4)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XL_1024_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(1024)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)

/*** BASIC Version XXL Tree (max_pmem_level) ***/
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_DRAM_OPTIMAL_NODE_SIZE, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(-1)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_LEAF_OPTIMAL_NODE_SIZE, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(0)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_1_OPTIMAL_NODE_SIZE, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(1)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_2_OPTIMAL_NODE_SIZE, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(2)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_3_OPTIMAL_NODE_SIZE, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(3)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_4_OPTIMAL_NODE_SIZE, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(4)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_1024_OPTIMAL_NODE_SIZE, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(1024)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_DRAM_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(-1)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_LEAF_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(0)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_1_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(1)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_2_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(2)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_3_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(3)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_4_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(4)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_1024_SMALL_NODE_SIZE, (PearTree<PEAR_SMALL_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(1024)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_DRAM_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(-1)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_LEAF_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(0)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_1_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(1)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_2_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(2)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_3_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(3)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_4_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(4)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_PMEM_LEVEL_XXL_1024_MAX_NODE_SIZE, (PearTree<PEAR_MAX_NODE_SIZE, float, PEAR_STRAT_BASIC_VERSION(1024)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)

/** PEAR STRAT max_dram_levels background persister **/
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_LEVELS_M_4, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_1(4)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_LEVELS_M_3, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_1(3)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_LEVELS_M_2, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_1(2)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
///** PEAR STRAT max_dram_levels background persister XL **/
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_LEVELS_XL_5, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_1(5)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_LEVELS_XL_4, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_1(4)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_LEVELS_XL_3, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_1(3)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_LEVELS_XL_2, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_LEVEL_BOUND(2)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//
///** PEAR STRAT max_dram_levels background persister XXL **/
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_LEVELS_XXL_5, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_1(5)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_LEVELS_XXL_4, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_1(4)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_LEVELS_XXL_3, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_1(3)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_LEVELS_XXL_2, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_1(2)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//
///** PEAR STRAT max_dram_nodes in-place persister **/
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_M_4_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_2(33333)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_M_3_5_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_2(16000)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_M_3_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_2(930)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
///** PEAR STRAT max_dram_nodes in-place persister XL **/
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_XL_5_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_2(3333333)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_XL_4_5_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_2(1500000)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_XL_4_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NODE_BOUND(3300)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_XL_3_5_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NODE_BOUND(1700)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_XL_3_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_2(100)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//
///** PEAR STRAT max_dram_nodes in-place persister XXL **/
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_XXL_5_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_2(6666666)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_XXL_4_5_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_2(110000)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
////INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_XXL_4_5_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_2(110000)>), SZ_TAXI_200M, SZ_TAXI_200M, 190 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_XXL_4_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_2(6700)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
////INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_XXL_4_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_2(6700)>), SZ_TAXI_200M, SZ_TAXI_200M, 190 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_XXL_3_5_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_2(3550)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_XXL_3_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_2(200)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
////INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_XXL_3_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NO_2(200)>), SZ_TAXI_200M, SZ_TAXI_200M, 190 * 1000 * 1000, 10 * 1000 * 1000)
//
///** PEAR STRAT max_dram_nodes background persister **/
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_BACKGROUND_M_4_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BACKGROUND_PERSISTING + PEAR_STRAT_NO_2(33333)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_BACKGROUND_M_3_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BACKGROUND_PERSISTING + PEAR_STRAT_NO_2(950)>), SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
///** PEAR STRAT max_dram_nodes background persister XL **/
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_BACKGROUND_XL_5_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BACKGROUND_PERSISTING + PEAR_STRAT_NO_2(3333333)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_BACKGROUND_XL_4_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BACKGROUND_PERSISTING + PEAR_STRAT_NODE_BOUND(3300)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_BACKGROUND_XL_3_5_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BACKGROUND_PERSISTING + PEAR_STRAT_NODE_BOUND(1700)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_BACKGROUND_XL_3_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BACKGROUND_PERSISTING + PEAR_STRAT_NO_2(100)>), SZ_TAXI_100M, SZ_TAXI_100M, 80 * 1000 * 1000, 20 * 1000 * 1000)
//
///** PEAR STRAT max_dram_nodes background persister XXL **/
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_BACKGROUND_XXL_5_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BACKGROUND_PERSISTING + PEAR_STRAT_NO_2(6666666)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_BACKGROUND_XXL_4_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BACKGROUND_PERSISTING + PEAR_STRAT_NO_2(6700)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_BACKGROUND_XXL_3_5_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BACKGROUND_PERSISTING + PEAR_STRAT_NO_2(3550)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//INSERT_BENCHMARK_SZ_TAXI(MAX_DRAM_NODES_BACKGROUND_XXL_3_LEVELS, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_BACKGROUND_PERSISTING + PEAR_STRAT_NO_2(200)>), SZ_TAXI_200M, SZ_TAXI_200M, 160 * 1000 * 1000, 40 * 1000 * 1000)
//
//
//
///*************** BOOST INSERT benchmarks *********************/
//
//#define INSERT_BENCHMARK_BOOST_SZ_TAXI(NAME, MAX_NODE_SIZE, MIN_NODE_SIZE, NUM_REINSERTS, INITIAL_DATASET, ADDED_DATASET, INITIAL_SIZE, TOTAL_ADDED_SIZE) \
//BENCHMARK_TEMPLATE_DEFINE_F(MicroBenchmarkFixture, BM_BOOST_INSERT_SZ_TAXI_ ## NAME, PearTree<62,24, float, PEAR_STRAT_NO_1(2)>)(benchmark::State& state) { \
//    boost_benchmark<MAX_NODE_SIZE,MIN_NODE_SIZE,NUM_REINSERTS>(INITIAL_DATASET, ADDED_DATASET, state, *this);                     \
//} \
//BENCHMARK_REGISTER_F(MicroBenchmarkFixture, BM_BOOST_INSERT_SZ_TAXI_ ## NAME)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(1)->Args({(INITIAL_SIZE), (TOTAL_ADDED_SIZE)});
//
//
//template<size_t max_node_size,size_t min_node_size, size_t reinsert>
//static void boost_benchmark(micro_benchmark::rect_float_type const * const initial_rects, micro_benchmark::rect_float_type const * const added_rects, benchmark::State& state, MicroBenchmarkFixture<PearTree<62,24, float, PEAR_STRAT_NO_1(2)>> const &fixture) {
//    std::shared_ptr<boost::geometry::index::rtree<micro_benchmark::boost_value , boost::geometry::index::rstar<max_node_size,min_node_size,reinsert> >> boost_tree;
//    int initial_size = state.range(0);
//    int added_size = state.range(1);
//    boost_tree= std::make_shared<boost::geometry::index::rtree<micro_benchmark::boost_value , boost::geometry::index::rstar<max_node_size,min_node_size,reinsert> >>();
//    fixture.prepare_boost_tree(initial_rects, initial_size, boost_tree);
//    std::vector<std::pair<micro_benchmark::boost_rect, int64_t> const *> boost_rects = std::vector<std::pair<micro_benchmark::boost_rect, int64_t> const *>();
//    for (int i = 0; i < added_size; i++) {
//        boost_rects.push_back(std::make_shared<std::pair<micro_benchmark::boost_rect, int64_t>>(std::make_pair(micro_benchmark::boost_rect(
//                micro_benchmark::boost_point(added_rects[i].x_min, added_rects[i].y_min),
//                micro_benchmark::boost_point(added_rects[i].x_max, added_rects[i].y_max)),
//                                          (int64_t) i + initial_size)).get());
//    }
//    for(auto _: state) {
//        state.SetItemsProcessed(initial_size+added_size);
//        for (int i = 0; i < added_size; i++) {
//            boost_tree->insert(*(boost_rects[i]));
//        }
//    }
//}
//
//INSERT_BENCHMARK_BOOST_SZ_TAXI(NO_REINSERT_MAX_NODE_SIZE, 62, 24, 0 , SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_BOOST_SZ_TAXI(NO_REINSERT_OPTIMAL_NODE_SIZE, 46, 16, 0, SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_BOOST_SZ_TAXI(NO_REINSERT_SMALL_NODE_SIZE, 30, 8, 0, SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//
//INSERT_BENCHMARK_BOOST_SZ_TAXI(REINSERT_5_MAX_NODE_SIZE, 62, 24, 05, SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_BOOST_SZ_TAXI(REINSERT_5_OPTIMAL_NODE_SIZE, 46, 16, 5, SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
//INSERT_BENCHMARK_BOOST_SZ_TAXI(REINSERT_5_SMALL_NODE_SIZE, 30, 8, 5, SZ_TAXI_10M, SZ_TAXI_SECOND_10M, 20 * 1000 * 1000, 10 * 1000 * 1000)
