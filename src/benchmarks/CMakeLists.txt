set(
        SOURCES
        micro_benchmark_fixture.hpp micro_benchmark_main.cpp micro_benchmark.hpp)

set(
        MICROBENCHMARK_SOURCES
        insert_micro_benchmark.cpp
        query_micro_benchmark.cpp
        recovery_micro_benchmark.cpp)

message(STATUS "PROJECT_SOURCE_DIR path: ${PROJECT_SOURCE_DIR}.")

add_executable(micro_benchmarks ${SOURCES} ${MICROBENCHMARK_SOURCES} ${PEAR_SOURCES} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(micro_benchmarks PMDK)
    target_link_libraries(micro_benchmarks pmem2)
else ()
    target_link_libraries(micro_benchmarks ${PMEM_LIBRARIES})
endif ()
target_include_directories(micro_benchmarks PUBLIC "${google_benchmark_SOURCE_DIR}/include")
target_link_libraries(micro_benchmarks utils benchmark::benchmark)
target_compile_definitions(micro_benchmarks PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DNDEBUG)

add_executable(eval_persistence_degree evaluation/eval_persistence_degree.cpp ${SOURCES} ${PEAR_SOURCES} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(eval_persistence_degree PMDK)
    target_link_libraries(eval_persistence_degree pmem2)
else ()
    target_link_libraries(eval_persistence_degree ${PMEM_LIBRARIES})
endif ()
target_include_directories(eval_persistence_degree PUBLIC "${google_benchmark_SOURCE_DIR}/include")
target_link_libraries(eval_persistence_degree utils benchmark::benchmark)
target_compile_definitions(eval_persistence_degree PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DNDEBUG)

add_executable(eval_scalability evaluation/eval_scalability.cpp ${SOURCES} ${PEAR_SOURCES} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(eval_scalability PMDK)
    target_link_libraries(eval_scalability pmem2)
else ()
    target_link_libraries(eval_scalability ${PMEM_LIBRARIES})
endif ()
target_include_directories(eval_scalability PUBLIC "${google_benchmark_SOURCE_DIR}/include")
target_link_libraries(eval_scalability utils benchmark::benchmark)
target_compile_definitions(eval_scalability PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DNDEBUG)

add_executable(eval_scalability_hyperthreading evaluation/eval_scalability_hyperthreading.cpp ${SOURCES} ${PEAR_SOURCES} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(eval_scalability_hyperthreading PMDK)
    target_link_libraries(eval_scalability_hyperthreading pmem2)
else ()
    target_link_libraries(eval_scalability_hyperthreading ${PMEM_LIBRARIES})
endif ()
target_include_directories(eval_scalability_hyperthreading PUBLIC "${google_benchmark_SOURCE_DIR}/include")
target_link_libraries(eval_scalability_hyperthreading utils benchmark::benchmark)
target_compile_definitions(eval_scalability_hyperthreading PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DNDEBUG)

add_executable(eval_existing_systems evaluation/eval_existing_systems.cpp ${SOURCES} ${PEAR_SOURCES} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(eval_existing_systems PMDK)
    target_link_libraries(eval_existing_systems pmem2)
else ()
    target_link_libraries(eval_existing_systems ${PMEM_LIBRARIES})
endif ()
target_include_directories(eval_existing_systems PUBLIC "${google_benchmark_SOURCE_DIR}/include")
target_link_libraries(eval_existing_systems utils benchmark::benchmark)
target_compile_definitions(eval_existing_systems PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DNDEBUG)

add_executable(eval_recovery evaluation/eval_recovery.cpp ${SOURCES} ${PEAR_SOURCES} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(eval_recovery PMDK)
    target_link_libraries(eval_recovery pmem2)
else ()
    target_link_libraries(eval_recovery ${PMEM_LIBRARIES})
endif ()
target_include_directories(eval_recovery PUBLIC "${google_benchmark_SOURCE_DIR}/include")
target_link_libraries(eval_recovery utils benchmark::benchmark)
target_compile_definitions(eval_recovery PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DNDEBUG)

add_executable(eval_persisting evaluation/eval_persisting.cpp ${SOURCES} ${PEAR_SOURCES} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(eval_persisting PMDK)
    target_link_libraries(eval_persisting pmem2)
else ()
    target_link_libraries(eval_persisting ${PMEM_LIBRARIES})
endif ()
target_include_directories(eval_persisting PUBLIC "${google_benchmark_SOURCE_DIR}/include")
target_link_libraries(eval_persisting utils benchmark::benchmark)
target_compile_definitions(eval_persisting PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DNDEBUG)

add_executable(eval_simd evaluation/eval_simd.cpp ${SOURCES} ${PEAR_SOURCES} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(eval_simd PMDK)
    target_link_libraries(eval_simd pmem2)
else ()
    target_link_libraries(eval_simd ${PMEM_LIBRARIES})
endif ()
target_include_directories(eval_simd PUBLIC "${google_benchmark_SOURCE_DIR}/include")
target_link_libraries(eval_simd utils benchmark::benchmark)
target_compile_definitions(eval_simd PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DNDEBUG)

add_executable(eval_prefetching evaluation/eval_prefetching.cpp ${SOURCES} ${PEAR_SOURCES} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(eval_prefetching PMDK)
    target_link_libraries(eval_prefetching pmem2)
else ()
    target_link_libraries(eval_prefetching ${PMEM_LIBRARIES})
endif ()
target_include_directories(eval_prefetching PUBLIC "${google_benchmark_SOURCE_DIR}/include")
target_link_libraries(eval_prefetching utils benchmark::benchmark)
target_compile_definitions(eval_prefetching PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DNDEBUG)

add_executable(eval_locking evaluation/eval_locking.cpp ${SOURCES} ${PEAR_SOURCES} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(eval_locking PMDK)
    target_link_libraries(eval_locking pmem2)
else ()
    target_link_libraries(eval_locking ${PMEM_LIBRARIES})
endif ()
target_include_directories(eval_locking PUBLIC "${google_benchmark_SOURCE_DIR}/include")
target_link_libraries(eval_locking utils benchmark::benchmark)
target_compile_definitions(eval_locking PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DNDEBUG)

add_executable(eval_node_size evaluation/eval_node_size.cpp ${SOURCES} ${PEAR_SOURCES} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(eval_node_size PMDK)
    target_link_libraries(eval_node_size pmem2)
else ()
    target_link_libraries(eval_node_size ${PMEM_LIBRARIES})
endif ()
target_include_directories(eval_node_size PUBLIC "${google_benchmark_SOURCE_DIR}/include")
target_link_libraries(eval_node_size utils benchmark::benchmark)
target_compile_definitions(eval_node_size PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DNDEBUG)

add_executable(eval_node_performance_baseline evaluation/eval_node_performance_baseline.cpp ${SOURCES} ${PEAR_SOURCES} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(eval_node_performance_baseline PMDK)
    target_link_libraries(eval_node_performance_baseline pmem2)
else ()
    target_link_libraries(eval_node_performance_baseline ${PMEM_LIBRARIES})
endif ()
target_include_directories(eval_node_performance_baseline PUBLIC "${google_benchmark_SOURCE_DIR}/include")
target_link_libraries(eval_node_performance_baseline utils benchmark::benchmark)
target_compile_definitions(eval_node_performance_baseline PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DNDEBUG)

add_executable(eval_pmem_unaligned evaluation/eval_pmem_unaligned.cpp ${SOURCES} ${PEAR_SOURCES} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(eval_pmem_unaligned PMDK)
    target_link_libraries(eval_pmem_unaligned pmem2)
else ()
    target_link_libraries(eval_pmem_unaligned ${PMEM_LIBRARIES})
endif ()
target_include_directories(eval_pmem_unaligned PUBLIC "${google_benchmark_SOURCE_DIR}/include")
target_link_libraries(eval_pmem_unaligned utils benchmark::benchmark)
target_compile_definitions(eval_pmem_unaligned PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DNDEBUG -DUNALIGNED_BUILD)

add_executable(eval_cpu_cache_aligned evaluation/eval_cpu_cache_aligned.cpp ${SOURCES} ${PEAR_SOURCES} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(eval_cpu_cache_aligned PMDK)
    target_link_libraries(eval_cpu_cache_aligned pmem2)
else ()
    target_link_libraries(eval_cpu_cache_aligned ${PMEM_LIBRARIES})
endif ()
target_include_directories(eval_cpu_cache_aligned PUBLIC "${google_benchmark_SOURCE_DIR}/include")
target_link_libraries(eval_cpu_cache_aligned utils benchmark::benchmark)
target_compile_definitions(eval_cpu_cache_aligned PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DNDEBUG -DCPU_CACHE_ALIGNED_BUILD)

add_executable(eval_existing_systems_fpr evaluation/eval_existing_systems_fpr.cpp ${SOURCES} ${PEAR_SOURCES} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(eval_existing_systems_fpr PMDK)
    target_link_libraries(eval_existing_systems_fpr pmem2)
else ()
    target_link_libraries(eval_existing_systems_fpr ${PMEM_LIBRARIES})
endif ()
target_include_directories(eval_existing_systems_fpr PUBLIC "${google_benchmark_SOURCE_DIR}/include")
target_link_libraries(eval_existing_systems_fpr utils benchmark::benchmark)
target_compile_definitions(eval_existing_systems_fpr PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DNDEBUG -DFPR_TREE)

add_executable(eval_fpr ${SOURCES} ${SOURCES_FPR} ${SOURCES_LIB} evaluation/eval_fpr.cpp)
if (${BUILD_PMDK})
    add_dependencies(eval_fpr PMDK)
    target_link_libraries(eval_fpr pmem2)
else ()
    target_link_libraries(eval_fpr ${PMEM_LIBRARIES})
endif ()
target_include_directories(eval_fpr PUBLIC "${google_benchmark_SOURCE_DIR}/include")
target_link_libraries(eval_fpr benchmark::benchmark)
target_compile_definitions(eval_fpr PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DNDEBUG -DFPR_TREE)

add_executable(eval_fpr_hyperthreading ${SOURCES} ${SOURCES_FPR} ${SOURCES_LIB} evaluation/eval_fpr_hyperthreading.cpp)
if (${BUILD_PMDK})
    add_dependencies(eval_fpr_hyperthreading PMDK)
    target_link_libraries(eval_fpr_hyperthreading pmem2)
else ()
    target_link_libraries(eval_fpr_hyperthreading ${PMEM_LIBRARIES})
endif ()
target_include_directories(eval_fpr_hyperthreading PUBLIC "${google_benchmark_SOURCE_DIR}/include")
target_link_libraries(eval_fpr_hyperthreading benchmark::benchmark)
target_compile_definitions(eval_fpr_hyperthreading PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DNDEBUG -DFPR_TREE)

add_executable(eval_fpr_mixed_workload evaluation/eval_fpr_mixed_workload.cpp ${SOURCES_BASIC} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(eval_fpr_mixed_workload PMDK)
    target_link_libraries(eval_fpr_mixed_workload pmem2)
else ()
    target_link_libraries(eval_fpr_mixed_workload ${PMEM_LIBRARIES})
endif ()
target_compile_definitions(eval_fpr_mixed_workload PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DFPR_TREE)

add_executable(eval_mixed_workload evaluation/eval_mixed_workload.cpp ${SOURCES_BASIC} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(eval_mixed_workload PMDK)
    target_link_libraries(eval_mixed_workload pmem2)
else ()
    target_link_libraries(eval_mixed_workload ${PMEM_LIBRARIES})
endif ()
target_compile_definitions(eval_mixed_workload PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}")

add_executable(new_eval_persistence_degree new_eval/new_eval_persistence_degree.cpp ${SOURCES_BASIC} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(new_eval_persistence_degree PMDK)
    target_link_libraries(new_eval_persistence_degree pmem2)
else ()
    target_link_libraries(new_eval_persistence_degree ${PMEM_LIBRARIES})
endif ()
target_compile_definitions(new_eval_persistence_degree PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}")

add_executable(new_eval_scalability new_eval/new_eval_scalability.cpp ${SOURCES_BASIC} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(new_eval_scalability PMDK)
    target_link_libraries(new_eval_scalability pmem2)
else ()
    target_link_libraries(new_eval_scalability ${PMEM_LIBRARIES})
endif ()
target_compile_definitions(new_eval_scalability PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}")

add_executable(new_eval_fpr_query_latency new_eval/new_eval_fpr_query_latency.cpp ${SOURCES_BASIC} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(new_eval_fpr_query_latency PMDK)
    target_link_libraries(new_eval_fpr_query_latency pmem2)
else ()
    target_link_libraries(new_eval_fpr_query_latency ${PMEM_LIBRARIES})
endif ()
target_compile_definitions(new_eval_fpr_query_latency PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}" -DFPR_TREE)

add_executable(profiling_insert profiling_insert.cpp ${SOURCES_BASIC} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(profiling_insert PMDK)
    target_link_libraries(profiling_insert pmem2)
else ()
    target_link_libraries(profiling_insert ${PMEM_LIBRARIES})
endif ()
target_compile_definitions(profiling_insert PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}")

add_executable(profiling_query profiling_query.cpp ${SOURCES_BASIC} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(profiling_query PMDK)
    target_link_libraries(profiling_query pmem2)
else ()
    target_link_libraries(profiling_query ${PMEM_LIBRARIES})
endif ()
target_compile_definitions(profiling_query PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}")

add_executable(profiling_pear_recovery profiling_pear_recovery.cpp ${PEAR_SOURCES} ${SOURCES_LIB})
if (${BUILD_PMDK})
    add_dependencies(profiling_pear_recovery PMDK)
    target_link_libraries(profiling_pear_recovery pmem2)
else ()
    target_link_libraries(profiling_pear_recovery ${PMEM_LIBRARIES})
endif ()
target_compile_definitions(profiling_pear_recovery PUBLIC -DPROJECT_ROOT="${PROJECT_SOURCE_DIR}")
