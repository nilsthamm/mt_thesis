#include <benchmark/benchmark.h>

#include "macros/macros.hpp"

#include "pear_tree.hpp"
#include "../micro_benchmark_fixture.hpp"

BENCHMARK_TEMPLATE_DEFINE_F(MicroBenchmarkFixture, NO_SIMD_INSERT, PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_ENABLE_SIMD + PEAR_STRAT_BASIC_VERSION(1024)>)(benchmark::State& state) {
    eval_insert_benchmark(SZ_TAXI_100M, SZ_TAXI_200M + SZ_TAXI_XL_INITIAL_POINTS_AMONT, state, *this);
}
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NO_SIMD_INSERT)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(1)->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT))});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NO_SIMD_INSERT)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(2)->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT))});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NO_SIMD_INSERT)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(3)->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT))});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NO_SIMD_INSERT)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(4)->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT))});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NO_SIMD_INSERT)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(5)->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT))});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NO_SIMD_INSERT)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(6)->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT))});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NO_SIMD_INSERT)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(7)->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT))});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NO_SIMD_INSERT)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(8)->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT))});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NO_SIMD_INSERT)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(9)->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT))});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NO_SIMD_INSERT)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(10)->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT))});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NO_SIMD_INSERT)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(11)->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT))});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NO_SIMD_INSERT)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(12)->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT))});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NO_SIMD_INSERT)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(13)->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT))});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NO_SIMD_INSERT)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(14)->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT))});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NO_SIMD_INSERT)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(15)->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT))});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NO_SIMD_INSERT)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(16)->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT))});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NO_SIMD_INSERT)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(17)->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT))});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NO_SIMD_INSERT)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->Threads(18)->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT))});

#define REGISTER_NO_SIMD_QUERY_BENCHMARK(NAME, BATCH_SIZE) \
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NAME)->Unit(benchmark::kMillisecond)->Threads(1)->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,BATCH_SIZE});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NAME)->Unit(benchmark::kMillisecond)->Threads(2)->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,BATCH_SIZE});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NAME)->Unit(benchmark::kMillisecond)->Threads(3)->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,BATCH_SIZE});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NAME)->Unit(benchmark::kMillisecond)->Threads(4)->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,BATCH_SIZE});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NAME)->Unit(benchmark::kMillisecond)->Threads(5)->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,BATCH_SIZE});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NAME)->Unit(benchmark::kMillisecond)->Threads(6)->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,BATCH_SIZE});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NAME)->Unit(benchmark::kMillisecond)->Threads(7)->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,BATCH_SIZE});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NAME)->Unit(benchmark::kMillisecond)->Threads(8)->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,BATCH_SIZE});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NAME)->Unit(benchmark::kMillisecond)->Threads(9)->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,BATCH_SIZE});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NAME)->Unit(benchmark::kMillisecond)->Threads(10)->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,BATCH_SIZE});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NAME)->Unit(benchmark::kMillisecond)->Threads(11)->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,BATCH_SIZE});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NAME)->Unit(benchmark::kMillisecond)->Threads(12)->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,BATCH_SIZE});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NAME)->Unit(benchmark::kMillisecond)->Threads(13)->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,BATCH_SIZE});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NAME)->Unit(benchmark::kMillisecond)->Threads(14)->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,BATCH_SIZE});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NAME)->Unit(benchmark::kMillisecond)->Threads(15)->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,BATCH_SIZE});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NAME)->Unit(benchmark::kMillisecond)->Threads(16)->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,BATCH_SIZE});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NAME)->Unit(benchmark::kMillisecond)->Threads(17)->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,BATCH_SIZE});\
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, NAME)->Unit(benchmark::kMillisecond)->Threads(18)->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,BATCH_SIZE});


#define NO_SIMD_QUERY(NAME, TREE_TYPE) \
BENCHMARK_TEMPLATE_DEFINE_F(MicroBenchmarkFixture, NO_SIMD_QUERY_POINT_ ## NAME, argument_type<void(TREE_TYPE)>::type)(benchmark::State& state) { \
    eval_point_query_benchmark(SZ_TAXI_200M, SZ_TAXI_QUERY_SIZE, state, *this);                     \
}                                                 \
REGISTER_NO_SIMD_QUERY_BENCHMARK(NO_SIMD_QUERY_POINT_ ## NAME, 1)\
BENCHMARK_TEMPLATE_DEFINE_F(MicroBenchmarkFixture, NO_SIMD_QUERY_0_00001_ ## NAME, argument_type<void(TREE_TYPE)>::type)(benchmark::State& state) { \
    eval_range_query_benchmark(SZ_TAXI_200M, micro_benchmark::get_pear_query_rects_180m_0_00001(), state, *this);                     \
}                                                 \
REGISTER_NO_SIMD_QUERY_BENCHMARK(NO_SIMD_QUERY_0_00001_ ## NAME, QUERY_00001_BATCH_SIZE)\
BENCHMARK_TEMPLATE_DEFINE_F(MicroBenchmarkFixture, NO_SIMD_QUERY_0_0001_ ## NAME, argument_type<void(TREE_TYPE)>::type)(benchmark::State& state) { \
    eval_range_query_benchmark(SZ_TAXI_200M, micro_benchmark::get_pear_query_rects_180m_0_0001(), state, *this);                     \
}                                                 \
REGISTER_NO_SIMD_QUERY_BENCHMARK(NO_SIMD_QUERY_0_0001_ ## NAME, QUERY_0001_BATCH_SIZE)\
BENCHMARK_TEMPLATE_DEFINE_F(MicroBenchmarkFixture, NO_SIMD_QUERY_0_001_ ## NAME, argument_type<void(TREE_TYPE)>::type)(benchmark::State& state) { \
    eval_range_query_benchmark(SZ_TAXI_200M, micro_benchmark::get_pear_query_rects_180m_0_001(), state, *this);                     \
}                                                 \
REGISTER_NO_SIMD_QUERY_BENCHMARK(NO_SIMD_QUERY_0_001_ ## NAME, QUERY_001_BATCH_SIZE)

NO_SIMD_QUERY(PMEM, (PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_ENABLE_SIMD + PEAR_STRAT_BASIC_VERSION(1024)>))