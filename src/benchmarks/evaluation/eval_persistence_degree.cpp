#include <benchmark/benchmark.h>

#include "macros/macros.hpp"

#include "pear_tree.hpp"
#include "../micro_benchmark_fixture.hpp"


#define PERSISTENCE_DEGREE_INSERT_NODE_BOUND(NAME, NUM_DRAM_NODES) \
BENCHMARK_TEMPLATE_DEFINE_F(MicroBenchmarkFixture, EVAL_PERSITENCE_DEGREE_INSERT_NODE_BOUND ## NAME, argument_type<void(PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_PARTIAL_PERSISTER_STATS+PEAR_STRAT_NODE_BOUND_BATCHING(NUM_DRAM_NODES,1)>)>::type)(benchmark::State& state) { \
    eval_insert_benchmark_hyperthreading(SZ_TAXI_100M, SZ_TAXI_200M + SZ_TAXI_XL_INITIAL_POINTS_AMONT, state, *this);                                                                                                                                                  \
} \
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, EVAL_PERSITENCE_DEGREE_INSERT_NODE_BOUND ## NAME)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->UseRealTime()->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT)), OPTIMAL_NUMBER_INSERT_THREADS});

#define PERSISTENCE_DEGREE_INSERT_LEVEL_BOUND(NAME, NUM_DRAM_LEVELS) \
BENCHMARK_TEMPLATE_DEFINE_F(MicroBenchmarkFixture, EVAL_PERSITENCE_DEGREE_INSERT_LEVEL_BOUND ## NAME, argument_type<void(PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_PARTIAL_PERSISTER_STATS+PEAR_STRAT_LEVEL_BOUND(NUM_DRAM_LEVELS)>)>::type)(benchmark::State& state) { \
    eval_insert_benchmark_hyperthreading(SZ_TAXI_100M, SZ_TAXI_200M + SZ_TAXI_XL_INITIAL_POINTS_AMONT, state, *this); \
} \
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, EVAL_PERSITENCE_DEGREE_INSERT_LEVEL_BOUND ## NAME)->Unit(benchmark::kMillisecond)->INSERT_ITERATIONS_AND_REPETITIONS->UseRealTime()->Args({(SZ_TAXI_XL_INITIAL_POINTS_AMONT), ((SZ_TAXI_XL_ADDED_POINTS_AMONT)), OPTIMAL_NUMBER_INSERT_THREADS});


//PERSISTENCE_DEGREE_INSERT_LEVEL_BOUND(5_LEVELS, 4)
//PERSISTENCE_DEGREE_INSERT_LEVEL_BOUND(4_LEVELS, 3)
//PERSISTENCE_DEGREE_INSERT_LEVEL_BOUND(3_LEVELS, 2)

// only leaf in PMEM = 390MB DRAM
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(MAX_DRAM_NODES, 320000)
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(380_MB_DRAM, ((int)(380.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(360_MB_DRAM, ((int)(360.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(340_MB_DRAM, ((int)(340.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(320_MB_DRAM, ((int)(320.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(300_MB_DRAM, ((int)(300.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(280_MB_DRAM, ((int)(280.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(260_MB_DRAM, ((int)(260.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(240_MB_DRAM, ((int)(240.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(220_MB_DRAM, ((int)(220.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(200_MB_DRAM, ((int)(200.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(180_MB_DRAM, ((int)(180.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(160_MB_DRAM, ((int)(160.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(140_MB_DRAM, ((int)(140.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(120_MB_DRAM, ((int)(120.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(100_MB_DRAM, ((int)(100.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(80_MB_DRAM, ((int)(80.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(60_MB_DRAM, ((int)(60.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(40_MB_DRAM, ((int)(40.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(20_MB_DRAM, ((int)(20.0*1024.0*1024.0/1280.0)))

// 5 MB DRAM = only two levels in DRAM
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(1_MB_DRAM, 900)
//
//PERSISTENCE_DEGREE_INSERT_NODE_BOUND(3_DRAM_LEVELS, 12500)

#define PERSISTENCE_DEGREE_QUERY_NODE_BOUND(NAME, NUM_DRAM_NODES) \
BENCHMARK_TEMPLATE_DEFINE_F(MicroBenchmarkFixture, PERSITENCE_DEGREE_QUERY_POINT_NODE_BOUND ## NAME, argument_type<void(PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_NODE_BOUND(NUM_DRAM_NODES)>)>::type)(benchmark::State& state) { \
    eval_point_query_benchmark_thread_binding(SZ_TAXI_200M, SZ_TAXI_QUERY_SIZE, state, *this);                     \
}                                                 \
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, PERSITENCE_DEGREE_QUERY_POINT_NODE_BOUND ## NAME)->Unit(benchmark::kMillisecond)->UseRealTime()->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,1,OPTIMAL_NUMBER_POINT_QUERY_THREADS});


#define PERSISTENCE_DEGREE_QUERY_LEVEL_BOUND(NAME, NUM_LEVELS) \
BENCHMARK_TEMPLATE_DEFINE_F(MicroBenchmarkFixture, PERSITENCE_DEGREE_QUERY_POINT_LEVEL_BOUND ## NAME, argument_type<void(PearTree<PEAR_OPTIMAL_NODE_SIZE, float, PEAR_STRAT_PARTIAL_PERSISTER_STATS+PEAR_STRAT_LEVEL_BOUND(NUM_LEVELS)>)>::type)(benchmark::State& state) { \
    eval_point_query_benchmark_thread_binding(SZ_TAXI_200M, SZ_TAXI_QUERY_SIZE, state, *this); \
} \
BENCHMARK_REGISTER_F(MicroBenchmarkFixture, PERSITENCE_DEGREE_QUERY_POINT_LEVEL_BOUND ## NAME)->Unit(benchmark::kMillisecond)->UseRealTime()->QUERY_ITERATIONS_AND_REPETITIONS->Args({SZ_TAXI_XL_INITIAL_POINTS_AMONT+SZ_TAXI_XL_ADDED_POINTS_AMONT,1,OPTIMAL_NUMBER_POINT_QUERY_THREADS});

//PERSISTENCE_DEGREE_QUERY_LEVEL_BOUND(5_LEVELS, 4)
//PERSISTENCE_DEGREE_QUERY_LEVEL_BOUND(4_LEVELS, 3)
//PERSISTENCE_DEGREE_QUERY_LEVEL_BOUND(3_LEVELS, 2)


// only leaf in PMEM = 390MB DRAM
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(MAX_DRAM_NODES, 320000)
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(360_MB_DRAM, ((int)(360.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(320_MB_DRAM, ((int)(320.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(280_MB_DRAM, ((int)(280.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(240_MB_DRAM, ((int)(240.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(200_MB_DRAM, ((int)(200.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(160_MB_DRAM, ((int)(160.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(120_MB_DRAM, ((int)(120.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(80_MB_DRAM, ((int)(80.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(40_MB_DRAM, ((int)(40.0*1024.0*1024.0/1280.0)))

// 5 MB DRAM = only two levels in DRAM
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(1_MB_DRAM, 900)

//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(380_MB_DRAM, ((int)(380.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(340_MB_DRAM, ((int)(340.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(300_MB_DRAM, ((int)(300.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(260_MB_DRAM, ((int)(260.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(220_MB_DRAM, ((int)(220.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(180_MB_DRAM, ((int)(180.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(140_MB_DRAM, ((int)(140.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(100_MB_DRAM, ((int)(100.0*1024.0*1024.0/1280.0)))
//PERSISTENCE_DEGREE_QUERY_NODE_BOUND(60_MB_DRAM, ((int)(60.0*1024.0*1024.0/1280.0)))
PERSISTENCE_DEGREE_QUERY_NODE_BOUND(20_MB_DRAM, ((int)(20.0*1024.0*1024.0/1280.0)))
